//------------------------------------------------------------------------------
//
//	Copyright (C) 2010 Nexell co., Ltd All Rights Reserved
//	Nexell Proprietary & Confidential
//
//	Module     : 
//	File       : 
//	Description:
//	Author     : RayPark
//	History    :
//------------------------------------------------------------------------------

#ifndef __NX_CodecID__
#define __NX_CodecID__

//============================================================================
/// @Codec Type
enum {
	CODEC_VIDEO = 0x0,
	CODEC_H264,
	CODEC_H263,
	CODEC_MPEG1VIDEO,
	CODEC_MPEG2VIDEO,
	CODEC_MPEG4,
	CODEC_MSMPEG4V3,
	CODEC_FLV1,
	CODEC_WMV1,
	CODEC_WMV2,
	CODEC_WMV3,
	CODEC_VC1,
	CODEC_RV30,
	CODEC_RV40,
	CODEC_THEORA,
	CODEC_VP8,

	CODEC_AUDIO = 0x1000,
	CODEC_RA_144,
	CODEC_RA_288,
	CODEC_MP2,
	CODEC_MP3, ///< preferred ID for decoding MPEG audio layer 1, 2 or 3
	CODEC_AAC,
	CODEC_AC3,
	CODEC_DTS,
	CODEC_VORBIS,
	CODEC_WMAV1,
	CODEC_WMAV2,
	CODEC_WMAPRO,
	CODEC_FLAC,
	CODEC_COOK,
	CODEC_APE,
	CODEC_AAC_LATM,

	//
	/* various PCM "codecs" */
	CODEC_PCM_S16LE,
	CODEC_PCM_S16BE,
	CODEC_PCM_U16LE,
	CODEC_PCM_U16BE,
	CODEC_PCM_S8,
	CODEC_PCM_U8,
	CODEC_PCM_MULAW,
	CODEC_PCM_ALAW,
	CODEC_PCM_S32LE,
	CODEC_PCM_S32BE,
	CODEC_PCM_U32LE,
	CODEC_PCM_U32BE,
	CODEC_PCM_S24LE,
	CODEC_PCM_S24BE,
	CODEC_PCM_U24LE,
	CODEC_PCM_U24BE,
	CODEC_PCM_S24DAUD,
	CODEC_PCM_ZORK,
	CODEC_PCM_S16LE_PLANAR,
	CODEC_PCM_DVD,
	CODEC_PCM_F32BE,
	CODEC_PCM_F32LE,
	CODEC_PCM_F64BE,
	CODEC_PCM_F64LE,
	CODEC_PCM_BLURAY,
	CODEC_PCM_LXF,
	CODEC_S302M,

	/* various ADPCM codecs */
	CODEC_ADPCM_IMA_QT,
	CODEC_ADPCM_IMA_WAV,
	CODEC_ADPCM_IMA_DK3,
	CODEC_ADPCM_IMA_DK4,
	CODEC_ADPCM_IMA_WS,
	CODEC_ADPCM_IMA_SMJPEG,
	CODEC_ADPCM_MS,
	CODEC_ADPCM_4XM,
	CODEC_ADPCM_XA,
	CODEC_ADPCM_ADX,
	CODEC_ADPCM_EA,
	CODEC_ADPCM_G726,
	CODEC_ADPCM_CT,
	CODEC_ADPCM_SWF,
	CODEC_ADPCM_YAMAHA,
	CODEC_ADPCM_SBPRO_4,
	CODEC_ADPCM_SBPRO_3,
	CODEC_ADPCM_SBPRO_2,
	CODEC_ADPCM_THP,
	CODEC_ADPCM_IMA_AMV,
	CODEC_ADPCM_EA_R1,
	CODEC_ADPCM_EA_R3,
	CODEC_ADPCM_EA_R2,
	CODEC_ADPCM_IMA_EA_SEAD,
	CODEC_ADPCM_IMA_EA_EACS,
	CODEC_ADPCM_EA_XAS,
	CODEC_ADPCM_EA_MAXIS_XA,
	CODEC_ADPCM_IMA_ISS,
	CODEC_ADPCM_G722,
};

#if 0
enum {
	MEDIASUBTYPE_YUV = 0x0,
	MEDIASUBTYPE_H264,
	MEDIASUBTYPE_H263,
	MEDIASUBTYPE_MPEG1VIDEO,
	MEDIASUBTYPE_MPEG2VIDEO,
	MEDIASUBTYPE_MPEG4,
	MEDIASUBTYPE_MSMPEG4V3,
	MEDIASUBTYPE_FLV1,
	MEDIASUBTYPE_WMV1,
	MEDIASUBTYPE_WMV2,
	MEDIASUBTYPE_WMV3,
	MEDIASUBTYPE_VC1,
	MEDIASUBTYPE_RV30,
	MEDIASUBTYPE_RV40,
	MEDIASUBTYPE_THEORA,
	MEDIASUBTYPE_VP8,

	MEDIASUBTYPE_PCM = 0x1000,
	MEDIASUBTYPE_RA_144,
	MEDIASUBTYPE_RA_288,
	MEDIASUBTYPE_MP2,
	MEDIASUBTYPE_MP3, ///< preferred ID for decoding MPEG audio layer 1, 2 or 3
	MEDIASUBTYPE_AAC,
	MEDIASUBTYPE_AC3,
	MEDIASUBTYPE_DTS,
	MEDIASUBTYPE_VORBIS,
	MEDIASUBTYPE_WMAV1,
	MEDIASUBTYPE_WMAV2,
	MEDIASUBTYPE_WMAPRO,
	MEDIASUBTYPE_FLAC,
	MEDIASUBTYPE_COOK,
	MEDIASUBTYPE_APE,
	MEDIASUBTYPE_AAC_LATM,
};
#endif

///SampleFormat
//enum AVSampleFormat {
#if 1
enum {
	SAMPLE_FOMAT_NONE = -1,
	SAMPLE_FOMAT_U8,          ///< unsigned 8 bits
	SAMPLE_FOMAT_S16,         ///< signed 16 bits
	SAMPLE_FOMAT_S32,         ///< signed 32 bits
	SAMPLE_FOMAT_FLT,         ///< float
	SAMPLE_FOMAT_DBL,         ///< double
	SAMPLE_FOMAT_NB,           ///< Number of sample formats. DO NOT USE if linking dynamically
};
#endif

//============================================================================

#endif	//	__NX_CodecID__

